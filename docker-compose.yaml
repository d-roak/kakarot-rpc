version: "3.2"

services:
  starknet:
    image: ghcr.io/dojoengine/dojo:v0.6.0-alpha.2
    command:
      - katana
      - --disable-fee
      - --validate-max-steps
      - "16777216"
      - --invoke-max-steps
      - "16777216"
      - --eth-gas-price
      - "0"
      - --strk-gas-price
      - "0"
      - --chain-id
      - KKRT
    ports:
      - 5050:5050
    networks:
      - internal
    restart: on-failure

  kakarot-deployer:
    image: ghcr.io/kkrt-labs/kakarot/deployer:latest
    # Always pull the latest image, until we use release tags
    pull_policy: always
    env_file:
      - ./docker/env/kakarot-deployer.env
    volumes:
      # Since STARKNET_NETWORK is set to katana, the deployments json files will be saved with katana network folder
      - deployments:/app/kakarot/deployments
    depends_on:
      starknet:
        condition: service_started
    restart: on-failure
    networks:
      - internal

  deployments-parser:
    image: apteno/alpine-jq:2023-07-24
    entrypoint: /entrypoint.sh
    volumes:
      - ./docker/scripts/deployments-parser-entrypoint.sh:/entrypoint.sh
      - deployments:/deployments
    depends_on:
      kakarot-deployer:
        condition: service_completed_successfully

  kakarot-rpc:
    image: ghcr.io/kkrt-labs/kakarot-rpc/node:latest
    # Always pull the latest image, until we use release tags
    # TODO: use release tags
    pull_policy: always
    ports:
      - 3030:3030
    env_file:
      - ./docker/env/kakarot-rpc.env
    volumes:
      # Mount the volume on workdir and use .env stored in root of the volume
      - deployments:/usr/src/app
    depends_on:
      deployments-parser:
        condition: service_completed_successfully
    restart: on-failure
    networks:
      - internal

  apibara-dna:
    image: quay.io/apibara/starknet:1.4.1
    command:
      - start
      - --rpc=http://starknet:5050
      - --wait-for-rpc
      - --data=/data
    ports:
      - 7171:7171
    volumes:
      - apibara:/data
    networks:
      - internal
    restart: on-failure

  ### MongoDB with Mongo Express
  mongo:
    image: mongo:6.0.8
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    networks:
      - internal
    env_file:
      - ./docker/env/mongo.env

  clone-repo:
    image: docker.io/alpine/git:latest
    entrypoint: /bin/sh
    command:
      - -c
      # clone the repository in `/code`, removing any old copy.
      - cd /code && rm -rf kakarot-indexer && git clone -v https://github.com/kkrt-labs/kakarot-indexer.git
    volumes:
      - indexer_code:/code
    restart: on-failure

  indexer:
    image: quay.io/apibara/sink-mongo
    command:
      - run
      - /code/kakarot-indexer/src/main.ts
    env_file:
      - ./docker/env/indexer.env
    restart: on-failure
    volumes:
      - indexer_code:/code
      - deployments:/deployments
    networks:
      - internal
    depends_on:
      clone-repo:
        condition: service_completed_successfully
      starknet:
        condition: service_started
      deployments-parser:
        condition: service_completed_successfully

networks:
  internal:

volumes:
  deployments:
  apibara:
  mongo_data:
  indexer_code:
